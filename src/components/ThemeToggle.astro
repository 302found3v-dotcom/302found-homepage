---
import SunIcon from "./icons/Sun.astro"
import MoonIcon from "./icons/Moon.astro"
import SystemIcon from "./icons/System.astro"

const THEMES = ["Light", "Dark", "System"];
---

<div class="theme-toggle-container">
  <button
    id="theme-toggle-btn"
    class="theme-toggle-button"
    aria-haspopup="true"
    aria-controls="themes-menu"
    aria-expanded="false"
  >
    <SunIcon id="light" class="theme-toggle-icon" />
    <MoonIcon id="dark" class="theme-toggle-icon" />
    <SystemIcon id="system" class="theme-toggle-icon" />
  </button>

  <div id="themes-menu" class="themes-menu">
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option" data-theme={theme.toLowerCase()}>
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
    .theme-toggle-container {
        position: relative;
        margin-left: 0.25rem;
        margin-right: 0.25rem;
    }

    .theme-toggle-button {
        appearance: none;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--theme-toggle-bg);
        color: var(--theme-toggle-color);
        padding: 0.4rem;
        border-radius: 0.375rem;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .theme-toggle-icon {
        width: 1.25rem;
        height: 1.25rem;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(0);
        opacity: 0;
        transition: transform 0.3s ease, opacity 0.3s ease;
        pointer-events: none;
    }

    .theme-toggle-icon.active {
        transform: translate(-50%, -50%) scale(1);
        opacity: 1;
        pointer-events: auto;
    }

    .themes-menu {
        position: absolute;
        top: 2rem;
        right: 0;
        transform: scale(0.8);
        display: none;
        font-size: 0.875rem;
        padding: 0.25rem;
        min-width: 8rem;
        border-radius: 0.375rem;
        border: 1px solid rgba(209, 213, 219, 1);
        background-color: rgba(255, 255, 255, 0.9);
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        backdrop-filter: blur(8px);
        z-index: 10;
    }

    html.dark .themes-menu {
        border: 1px solid rgba(55, 65, 81, 1);
        background-color: rgba(26, 32, 44, 0.9);
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.4);
    }

    .themes-menu-option {
        padding: 0.375rem 0.5rem;
        border-radius: 0.25rem;
        cursor: pointer;
        user-select: none;
        color: inherit;
        list-style: none;
    }

    .themes-menu-option:hover {
        background-color: rgba(100, 100, 100, 0.1);
    }

    #themes-menu.open {
        display: inline-block;
        animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
    }

    @keyframes scale-up-center {
        from {
            transform: scale(0.8);
            opacity: 0;
        }
        to {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>

<script is:inline>
  const themesMenu = document.getElementById("themes-menu");
  const toggleBtn = document.getElementById("theme-toggle-btn");
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");

  let remove = null;

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }

    return matchMedia.matches ? "dark" : "light";
  };

    const updateIcon = (themePreference) => {
    const icons = document.querySelectorAll(".theme-toggle-icon");

    icons.forEach((icon) => {
        icon.classList.remove("active");
    });

    const activeIcon = document.getElementById(themePreference);
    if (activeIcon) {
        activeIcon.classList.add("active");
    }
    };

  const updateTheme = () => {
    if (remove) remove();
    matchMedia.addEventListener("change", updateTheme);
    remove = () => matchMedia.removeEventListener("change", updateTheme);

    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList.toggle("dark", isDark);
  };

  updateTheme();

  document.addEventListener("click", () => {
    themesMenu.classList.remove("open");
    toggleBtn.setAttribute("aria-expanded", "false");
  });

  toggleBtn.addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !themesMenu.classList.contains("open");
    themesMenu.classList.toggle("open", isClosed);
    toggleBtn.setAttribute("aria-expanded", String(isClosed));
  });

  document.querySelectorAll(".themes-menu-option").forEach((option) => {
    option.addEventListener("click", (e) => {
      const selectedTheme = e.target.dataset.theme;
      localStorage.setItem("theme", selectedTheme);
      themesMenu.classList.remove("open");
      toggleBtn.setAttribute("aria-expanded", "false");
      updateTheme();
    });
  });

  document.addEventListener("astro:after-swap", () => {
    updateTheme();
    window.scrollTo({ left: 0, top: 0, behavior: "instant" });
  });
</script>
